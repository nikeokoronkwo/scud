#ifndef SCUD_LEXER_H
#define SCUD_LEXER_H

#include <string>
#include <vector>

namespace scud {
    // Representation class for a single token 
class Token {
public:
    // Enum to represent the given types of tokens, with the underlying type of `unsigned int`
    enum TokenKind {
        unknown = 0, 
        eof, 
        identifier, 
        string, 

        left_paren,
        right_paren,
        left_square_paren,
        right_square_paren,
        colon,

        equals,
        left_brace,
        right_brace,

        comma,
        single_quote,
        double_quote,
    };

private:
    // The line number at which this token was found from raw source
    int line;
    // The character number at which this token was found from raw source
    int character;

    // Simple method to convert a `TokenKind` to a representable string, for debugging purposes
    std::string stringify_token_kind(TokenKind kind) const ;

public:
    // The kind of the token
    TokenKind kind;
    // The token source/lexeme as a `std::string`
    std::string lexeme;

    // Constructor for a token type
    Token(std::string m_lexeme, TokenKind m_kind, int m_line = 0, int m_char = 0): lexeme(m_lexeme), kind(m_kind), line(m_line), character(m_char) {}

    // The token as a debug string
    std::string to_string() const ;
};

// Representation class of a lexer to scan and parse the given syntax from a source string
// 
// The lexer parses the source string and converts it to a list of tokens
class Lexer {
    // these variables are used to track the code scanning and lexing
    int ptr = -1;
    int line = 1;

public:
    // The string source 
    std::string source;

    // The tokens to be generated by the `scan_tokens` function
    std::vector<Token> tokens;

    // Lexer constructor
    Lexer(std::string source): source(source) {}
private:
    // Function to proceed to the next token
    const char next();

    // Whether the lexer has reached the end of the file
    bool at_end() const;

    // Adds a token to the list
    void add_token(const char* c, Token::TokenKind kind);
    void add_token(std::string c, Token::TokenKind kind);

    // Reads a string token from the source
    void read_string();

    // Function to scan each character from the source one after the other
    //
    // After each scan the tokens are deduced and added to the list
    void scan_token();

public:
    // Function to convert raw source to a list of tokens via lexing
    std::vector<Token> scan_tokens();
};
}


#endif